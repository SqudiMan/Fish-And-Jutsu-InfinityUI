package org.example;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicScrollBarUI;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class GameSettingsUI extends JFrame {
    private JPanel mainPanel;
    private JPanel leftPanel;
    private JPanel rightPanel;
    private JScrollPane rightScrollPane;

    // –¢–æ—á–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private Color darkBackground = new Color(32, 41, 69);  // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    private Color lightBackground = new Color(42, 52, 82); // –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
    private Color selectedBlue = new Color(64, 150, 255);  // –°–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    private Color textWhite = new Color(255, 255, 255);    // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
    private Color textGray = new Color(160, 160, 160);     // –°–µ—Ä—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π
    private Color inputBackground = new Color(28, 37, 65); // –§–æ–Ω –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    private Color borderColor = new Color(55, 65, 95);     // –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü

    public GameSettingsUI() {
        initializeUI();
    }

    private void initializeUI() {
        setTitle("expensive");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(920, 650);
        setLocationRelativeTo(null);
        setResizable(false);

        // –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
        mainPanel = new JPanel(new BorderLayout(0, 0));
        mainPanel.setBackground(darkBackground);

        createLeftPanel();
        createRightPanel();

        mainPanel.add(leftPanel, BorderLayout.WEST);
        mainPanel.add(rightScrollPane, BorderLayout.CENTER);

        add(mainPanel);
    }

    private void createLeftPanel() {
        leftPanel = new JPanel();
        leftPanel.setLayout(new BoxLayout(leftPanel, BoxLayout.Y_AXIS));
        leftPanel.setBackground(darkBackground);
        leftPanel.setPreferredSize(new Dimension(220, 650));
        leftPanel.setBorder(new EmptyBorder(25, 25, 25, 0));

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ "expensive" —Å –∏–∫–æ–Ω–∫–æ–π
        JPanel titlePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        titlePanel.setBackground(darkBackground);
        titlePanel.setMaximumSize(new Dimension(200, 30));

        JLabel diamondIcon = new JLabel("‚óÜ");
        diamondIcon.setForeground(selectedBlue);
        diamondIcon.setFont(new Font("Arial", Font.BOLD, 16));

        JLabel titleLabel = new JLabel(" expensive");
        titleLabel.setForeground(selectedBlue);
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 15));

        titlePanel.add(diamondIcon);
        titlePanel.add(titleLabel);
        leftPanel.add(titlePanel);

        leftPanel.add(Box.createVerticalStrut(35));

        // –ú–µ–Ω—é —ç–ª–µ–º–µ–Ω—Ç—ã
        String[] menuItems = {"Combat", "Movement", "Player", "Render", "Misc"};
        String[] menuIcons = {"‚öî", "üèÉ", "üë§", "üé®", "‚öô"};

        for (int i = 0; i < menuItems.length; i++) {
            JPanel menuItem = createMenuItem(menuIcons[i], menuItems[i], i == 0);
            leftPanel.add(menuItem);
            leftPanel.add(Box.createVerticalStrut(3));
        }

        leftPanel.add(Box.createVerticalGlue());

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–∏–∑—É
        JPanel userPanel = new JPanel(new BorderLayout(8, 0));
        userPanel.setBackground(darkBackground);
        userPanel.setMaximumSize(new Dimension(200, 40));
        userPanel.setBorder(new EmptyBorder(10, 0, 0, 0));

        JLabel userAvatar = new JLabel("üë§");
        userAvatar.setForeground(textWhite);
        userAvatar.setFont(new Font("Arial", Font.PLAIN, 20));

        JPanel userInfo = new JPanel();
        userInfo.setLayout(new BoxLayout(userInfo, BoxLayout.Y_AXIS));
        userInfo.setBackground(darkBackground);

        JLabel username = new JLabel("username");
        username.setForeground(textWhite);
        username.setFont(new Font("Segoe UI", Font.PLAIN, 13));

        JLabel status = new JLabel("status online");
        status.setForeground(textGray);
        status.setFont(new Font("Segoe UI", Font.PLAIN, 11));

        userInfo.add(username);
        userInfo.add(status);

        userPanel.add(userAvatar, BorderLayout.WEST);
        userPanel.add(userInfo, BorderLayout.CENTER);

        leftPanel.add(userPanel);
    }

    private void createRightPanel() {
        rightPanel = new JPanel();
        rightPanel.setLayout(new BoxLayout(rightPanel, BoxLayout.Y_AXIS));
        rightPanel.setBackground(lightBackground);
        rightPanel.setBorder(new EmptyBorder(25, 25, 25, 25));

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ Combat
        JLabel combatTitle = new JLabel("Combat");
        combatTitle.setForeground(textWhite);
        combatTitle.setFont(new Font("Segoe UI", Font.BOLD, 18));
        combatTitle.setAlignmentX(Component.LEFT_ALIGNMENT);
        rightPanel.add(combatTitle);
        rightPanel.add(Box.createVerticalStrut(20));

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Combat
        createCombatSettings();

        // –°–∫—Ä–æ–ª–ª –ø–∞–Ω–µ–ª—å
        rightScrollPane = new JScrollPane(rightPanel);
        rightScrollPane.setBackground(lightBackground);
        rightScrollPane.setBorder(null);
        rightScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        rightScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        rightScrollPane.getVerticalScrollBar().setUnitIncrement(16);

        // –ö–∞—Å—Ç–æ–º–Ω–∞—è –ø–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        rightScrollPane.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = borderColor;
                this.trackColor = lightBackground;
            }
        });
    }

    private void createCombatSettings() {
        // Max Distance
        rightPanel.add(createInputSetting("Max Distance", "Sets the value of the maximum target search distance", "3.1"));
        rightPanel.add(Box.createVerticalStrut(15));

        // Target Type
        rightPanel.add(createDropdownSetting("Target Type", "Filter targeting by specific entity type", "Players, Mobs, Animals"));
        rightPanel.add(Box.createVerticalStrut(15));

        // Attack setting
        rightPanel.add(createDropdownSetting("Attack setting", "Allows you to adjust the attack settings of the antiaim", "Only Critical"));
        rightPanel.add(Box.createVerticalStrut(15));

        // Move correction —Å –ø–æ–¥–º–µ–Ω—é
        JPanel moveCorrectionMain = createToggleSetting("Move correction", "Prevents detection by movement desync anticheat checks", false);
        rightPanel.add(moveCorrectionMain);
        rightPanel.add(Box.createVerticalStrut(10));

        // –ü–æ–¥–º–µ–Ω—é Move correction
        JPanel moveCorrectionSubmenu = new JPanel();
        moveCorrectionSubmenu.setLayout(new BoxLayout(moveCorrectionSubmenu, BoxLayout.Y_AXIS));
        moveCorrectionSubmenu.setBackground(lightBackground);
        moveCorrectionSubmenu.setBorder(new EmptyBorder(0, 20, 0, 0));
        moveCorrectionSubmenu.setAlignmentX(Component.LEFT_ALIGNMENT);

        JLabel submenuTitle = new JLabel("Settings Move correction");
        submenuTitle.setForeground(textWhite);
        submenuTitle.setFont(new Font("Segoe UI", Font.BOLD, 14));
        moveCorrectionSubmenu.add(submenuTitle);
        moveCorrectionSubmenu.add(Box.createVerticalStrut(10));

        moveCorrectionSubmenu.add(createDropdownSetting("Correction Type", "Select the type of movement correction", "Free"));

        rightPanel.add(moveCorrectionSubmenu);
        rightPanel.add(Box.createVerticalStrut(15));

        // Bypass
        rightPanel.add(createDropdownSetting("Bypass", "Allows you to select silent configuration", ""));
        rightPanel.add(Box.createVerticalStrut(15));

        // Aim Time
        rightPanel.add(createDropdownSetting("Aim Time", "Allows you to adjust the time of the calculation of the rotation", "Normal"));
        rightPanel.add(Box.createVerticalStrut(20));

        // HitBox —Å–µ–∫—Ü–∏—è
        JPanel hitboxSection = createHitBoxSection();
        rightPanel.add(hitboxSection);
        rightPanel.add(Box.createVerticalStrut(20));

        // No Friend Damage
        rightPanel.add(createToggleSetting("No Friend Damage", "", true));
        rightPanel.add(Box.createVerticalStrut(100)); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–Ω–∏–∑—É
    }

    private JPanel createMenuItem(String icon, String text, boolean selected) {
        JPanel panel = new JPanel(new BorderLayout(10, 0));
        panel.setBackground(selected ? selectedBlue : darkBackground);
        panel.setBorder(new EmptyBorder(12, 15, 12, 15));
        panel.setMaximumSize(new Dimension(200, 45));
        panel.setCursor(new Cursor(Cursor.HAND_CURSOR));

        JLabel iconLabel = new JLabel(icon);
        iconLabel.setForeground(textWhite);
        iconLabel.setFont(new Font("Arial", Font.PLAIN, 16));

        JLabel textLabel = new JLabel(text);
        textLabel.setForeground(textWhite);
        textLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));

        panel.add(iconLabel, BorderLayout.WEST);
        panel.add(textLabel, BorderLayout.CENTER);

        return panel;
    }

    private JPanel createInputSetting(String title, String description, String defaultValue) {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(lightBackground);
        panel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 65));
        panel.setAlignmentX(Component.LEFT_ALIGNMENT);

        JPanel leftSide = new JPanel();
        leftSide.setLayout(new BoxLayout(leftSide, BoxLayout.Y_AXIS));
        leftSide.setBackground(lightBackground);

        JLabel titleLabel = new JLabel(title);
        titleLabel.setForeground(textWhite);
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 14));

        JLabel descLabel = new JLabel("<html><body style='width: 300px'>" + description + "</body></html>");
        descLabel.setForeground(textGray);
        descLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));

        leftSide.add(titleLabel);
        leftSide.add(Box.createVerticalStrut(3));
        leftSide.add(descLabel);

        JTextField inputField = new JTextField(defaultValue);
        inputField.setBackground(inputBackground);
        inputField.setForeground(textWhite);
        inputField.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(borderColor, 1),
                BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        inputField.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        inputField.setPreferredSize(new Dimension(80, 30));

        panel.add(leftSide, BorderLayout.WEST);
        panel.add(inputField, BorderLayout.EAST);

        return panel;
    }

    private JPanel createDropdownSetting(String title, String description, String defaultValue) {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(lightBackground);
        panel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 65));
        panel.setAlignmentX(Component.LEFT_ALIGNMENT);

        JPanel leftSide = new JPanel();
        leftSide.setLayout(new BoxLayout(leftSide, BoxLayout.Y_AXIS));
        leftSide.setBackground(lightBackground);

        JLabel titleLabel = new JLabel(title);
        titleLabel.setForeground(textWhite);
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 14));

        leftSide.add(titleLabel);

        if (!description.isEmpty()) {
            JLabel descLabel = new JLabel("<html><body style='width: 300px'>" + description + "</body></html>");
            descLabel.setForeground(textGray);
            descLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
            leftSide.add(Box.createVerticalStrut(3));
            leftSide.add(descLabel);
        }

        String[] options = {defaultValue.isEmpty() ? "None" : defaultValue, "Option 1", "Option 2"};
        JComboBox<String> dropdown = new JComboBox<>(options);
        dropdown.setBackground(inputBackground);
        dropdown.setForeground(textWhite);
        dropdown.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        dropdown.setBorder(BorderFactory.createLineBorder(borderColor, 1));
        dropdown.setPreferredSize(new Dimension(150, 30));

        panel.add(leftSide, BorderLayout.WEST);
        panel.add(dropdown, BorderLayout.EAST);

        return panel;
    }

    private JPanel createToggleSetting(String title, String description, boolean defaultValue) {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(lightBackground);
        panel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 65));
        panel.setAlignmentX(Component.LEFT_ALIGNMENT);

        JPanel leftSide = new JPanel();
        leftSide.setLayout(new BoxLayout(leftSide, BoxLayout.Y_AXIS));
        leftSide.setBackground(lightBackground);

        JLabel titleLabel = new JLabel(title);
        titleLabel.setForeground(textWhite);
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 14));

        leftSide.add(titleLabel);

        if (!description.isEmpty()) {
            JLabel descLabel = new JLabel("<html><body style='width: 300px'>" + description + "</body></html>");
            descLabel.setForeground(textGray);
            descLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
            leftSide.add(Box.createVerticalStrut(3));
            leftSide.add(descLabel);
        }

        JCheckBox toggleBox = new JCheckBox();
        toggleBox.setSelected(defaultValue);
        toggleBox.setBackground(lightBackground);
        toggleBox.setForeground(selectedBlue);
        toggleBox.setFocusPainted(false);

        panel.add(leftSide, BorderLayout.WEST);
        panel.add(toggleBox, BorderLayout.EAST);

        return panel;
    }

    private JPanel createHitBoxSection() {
        JPanel section = new JPanel();
        section.setLayout(new BoxLayout(section, BoxLayout.Y_AXIS));
        section.setBackground(lightBackground);
        section.setAlignmentX(Component.LEFT_ALIGNMENT);
        section.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(borderColor, 1),
                BorderFactory.createEmptyBorder(15, 15, 15, 15)
        ));

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ HitBox
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(lightBackground);
        headerPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));

        JLabel hitboxTitle = new JLabel("HitBox");
        hitboxTitle.setForeground(textWhite);
        hitboxTitle.setFont(new Font("Segoe UI", Font.BOLD, 14));

        JLabel naLabel = new JLabel("N/A");
        naLabel.setForeground(textGray);
        naLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));

        headerPanel.add(hitboxTitle, BorderLayout.WEST);
        headerPanel.add(naLabel, BorderLayout.EAST);

        section.add(headerPanel);
        section.add(Box.createVerticalStrut(15));

        // Enable
        JPanel enablePanel = new JPanel(new BorderLayout());
        enablePanel.setBackground(lightBackground);
        enablePanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 25));

        JLabel enableLabel = new JLabel("Enable");
        enableLabel.setForeground(textWhite);
        enableLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));

        JCheckBox enableBox = new JCheckBox();
        enableBox.setBackground(lightBackground);
        enableBox.setFocusPainted(false);

        enablePanel.add(enableLabel, BorderLayout.WEST);
        enablePanel.add(enableBox, BorderLayout.EAST);

        section.add(enablePanel);
        section.add(Box.createVerticalStrut(10));

        // X2 Expand
        JPanel x2Panel = new JPanel(new BorderLayout());
        x2Panel.setBackground(lightBackground);
        x2Panel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));

        JLabel x2Label = new JLabel("X2 Expand");
        x2Label.setForeground(textWhite);
        x2Label.setFont(new Font("Segoe UI", Font.PLAIN, 12));

        JTextField x2Field = new JTextField("0.2");
        x2Field.setBackground(inputBackground);
        x2Field.setForeground(textWhite);
        x2Field.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(borderColor, 1),
                BorderFactory.createEmptyBorder(3, 8, 3, 8)
        ));
        x2Field.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        x2Field.setPreferredSize(new Dimension(60, 25));

        x2Panel.add(x2Label, BorderLayout.WEST);
        x2Panel.add(x2Field, BorderLayout.EAST);

        section.add(x2Panel);
        section.add(Box.createVerticalStrut(8));

        // Y Expand
        JPanel yPanel = new JPanel(new BorderLayout());
        yPanel.setBackground(lightBackground);
        yPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));

        JLabel yLabel = new JLabel("Y Expand");
        yLabel.setForeground(textWhite);
        yLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));

        JTextField yField = new JTextField("0");
        yField.setBackground(inputBackground);
        yField.setForeground(textWhite);
        yField.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(borderColor, 1),
                BorderFactory.createEmptyBorder(3, 8, 3, 8)
        ));
        yField.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        yField.setPreferredSize(new Dimension(60, 25));

        yPanel.add(yLabel, BorderLayout.WEST);
        yPanel.add(yField, BorderLayout.EAST);

        section.add(yPanel);

        return section;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (Exception e) {
                e.printStackTrace();
            }

            new GameSettingsUI().setVisible(true);
        });
    }
}
